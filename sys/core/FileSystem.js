import { verInfo } from "./VersionInfo.js";

export class FileSystem {
    defaultFs = {
        drives: {
            c: {
                type: "drive",
                displayName: "C:",
                content: {
                    "test.txt": {
                        type: "file",
                        content: ["base64", "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4="]
                    },
                    "directory": {
                        type: "dir",
                        content: {}
                    },
                    "test_symlink.txt": {
                        type: "symlink",
                        pointsToType: "file",
                        pointsTo: "C:\\test.txt",
                    }
                }
            }
        },
        updBuild: verInfo.build,
        dataVersion: 2
    }

    constructor() {
        console.group('fileSystem');
        try {
            var fileSys = JSON.parse(localStorage.fileSys);
            if (fileSys.dataVersion < this.defaultFs.dataVersion) {
                // TODO: implement some sort of update system
                console.log("found older file system version, reseting");
                this.resetFs();
            } else {
                console.log("sucessfully loaded file system");
            }
        } catch (e) {
            console.warn("error loading file system, reseting");
            this.resetFs();
        }
        console.groupEnd();
    }

    getFs() {
        return JSON.parse(localStorage.fileSys);
    }

    setFs(fs) {
        localStorage.fileSys = JSON.stringify(fs);
    }

    resetFs() {
        localStorage.fileSys = JSON.stringify(this.defaultFs);
    }

    parsePath(path) {
        // Code generated by ChatGPT because why not

        // Normalize path separators to forward slashes
        const normalizedPath = path.replace(/\\/g, '/');

        // Split path into drive letter, directory, and filename
        const [driveLetter, ...parts] = normalizedPath.split('/');
        const filename = parts.pop();

        // Build object with nested keys
        const fileSystem = {};
        let current = fileSystem;
        for (const part of parts) {
            current[part.toLowerCase()] = {};
            current = current[part.toLowerCase()];
        }
        current[filename.toLowerCase()] = '';

        // Format object as string
        let result = `os.getServ("fileSys").getFs()["drives"]["${driveLetter.slice(0, driveLetter.length - 1).toLowerCase()}"]["content"]`;
        for (const part of parts) {
            result += `["${part}"]["content"]`;
        }
        result += `["${filename}"]`;

        return result;
    }

    getFileContent(path, httpManager) {
        var file = eval(this.parsePath(path));
        if (file.type !== "file") {
            console.log("Is not a folder");
            return;
        }
        var encodedContent = file.content[1];
        var decodedContent = httpManager.fetchDataURL(encodedContent, "text", file.content[0]);
        return decodedContent;
    }
}